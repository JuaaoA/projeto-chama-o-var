@page "/criar-ocorrencia/"
@page "/criar-ocorrencia/{cpfTorcedor}"

@rendermode InteractiveServer
@using chamaovar.Components.Code
@inject IJSRuntime JsRuntime
@inject HttpClient http
@inject NavigationManager nav

<PageTitle>Criar Ocorrência</PageTitle>

<div class="menu-colaborador">
    <h3>Crie sua ocorrência aqui</h3>

    <form action="/" method="post" class="form_criar_ocorrencia">
        <fieldset>


            <input type="number" placeholder="Penalidade" @bind="penalidade">
            <input type="datetime" placeholder="Data da ocorrência" @bind="dataCriar">


            <!--
                <label for="nome-evento">Evento</label>
                <br />



                    <select>
                        <option>Evento</option>
                        <option value="flavas">Flamengo x Vasco</option>
                    </select>

            -->

            <br /><br />

            <label for="acontecimento">Acontecimento</label>

            <br />

            <select @bind="acontecimentoCriar" class="acontecimento_label">
                <option>Acontecimento</option>
                <option value="Agressão Física">Agressão Física</option>
                <option value="Dano ao patrimônio">Dano ao patrimônio</option>
                <option value="Insultos verbais">Insultos verbais</option>
                <option value="Racismo ou discriminação">Racismo ou discriminação</option>
                <option value="Provocar tumulto ou desordem">Provocar tumulto ou desordem</option>
            </select>

            <br /><br /><br />
            <legend>Informações do indivíduo</legend>

            <input type="text" placeholder="CPF do indivíduo" @bind="cpfTorcedor">

            <div class="botoes-criar-ocorrencia">
                <button type="button" @onclick="Enviar">Criar Ocorrência</button>
                <button type="reset">Resetar dados</button>
            </div>
        </fieldset>
    </form>
</div>

@code {
    public string acontecimentoCriar;

    [Parameter]
    public string? cpfTorcedor { get; set; }

    public DateTime dataCriar;

    public int penalidade;

    public async void Enviar()
    {
        // Evitar que valores nulos atrapalhem
        if (!await this.AvoidErrors()) return;

        // Caso o frontend não encontre problemas, continuar
        // Enviar para o backend os valores novos
        var resposta = await http.PostAsync(
            $"/chamaovar-api/ocorrencia?acontecimento={acontecimentoCriar}" +
            $"&data={dataCriar}" +
            $"&penalidade={penalidade}" +
            $"&cpf={cpfTorcedor}" +
            $"&colaboradorToken={TokenSystem.GetToken().nome}", null);

        // Caso aconteça algum erro
        int statusCode = (int)resposta.StatusCode;

        if (statusCode != 200)
        {
            // Indicar qual foi o erro
            await JsRuntime.InvokeVoidAsync("alert", $"Erro {statusCode} : {await resposta.Content.ReadAsStringAsync()}");

            // Impedir o usuário de continuar
            return;
        }

        // Se não, alertar que já foi feito
        try
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Ocorrência criada com sucesso!");
        }
        catch
        {

        }
    }

    public async Task<bool> AvoidErrors()
    {
        // Caso a penalidade extrapole os limites
        if (penalidade < 0 || penalidade > 1000)
        {
            try
            {
                await JsRuntime.InvokeVoidAsync("alert", $"Indique uma penalidade válida!");
            }
            catch
            {

            }

            return false;
        }

        // Caso os valores sejam nulos
        if (acontecimentoCriar == null || acontecimentoCriar == "Acontecimento")
        {
            try
            {
                await JsRuntime.InvokeVoidAsync("alert", $"Indique o acontecimento!");
            }
            catch
            {

            }

            return false;
        }

        if (cpfTorcedor == null || cpfTorcedor == "")
        {
            try
            {
                await JsRuntime.InvokeVoidAsync("alert", $"Indique o CPF do torcedor!");
            }
            catch
            {

            }

            return false;
        }

        if (dataCriar.CompareTo(DateTime.Now) > 0)
        {
            try
            {
                await JsRuntime.InvokeVoidAsync("alert", $"Indique uma data válida!");
            }
            catch
            {

            }

            return false;
        }

        // Caso dê tudo certo, retornar true
        return true;
    }
}
