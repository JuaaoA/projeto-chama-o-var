@rendermode InteractiveServer
@using chamaovar.Components.Code

@inject IJSRuntime JsRuntime
@inject HttpClient http
@inject NavigationManager nav


<div class="lista_eventos_usuario_item_container">

    @if (evento != null)
    {
        <div class="id_evento_lista">
            Evento #@evento.id
        </div>

        <div class="nome_evento_lista">
            @evento.nome
        </div>

        <div class="detalhes_evento_lista">
            @evento.detalhes
        </div>

        <div class="data_evento_lista">
            @evento.data_evento.Day / @evento.data_evento.Month / @evento.data_evento.Year
        </div>

        <div class="horario_evento_lista">
            @evento.data_evento.Hour : @evento.data_evento.Minute H
        </div>

        <div class="aviso_evento_lista">
            É necessário @evento.minimo_pontuacao pontos para ingressar.
        </div>

        @if (botao_ingresso_disponivel)
        {
            <button @onclick="IngressarEvento">Ingressar</button>
        }
        else
        {
            <br />
            <div style="color: red;">@text_ingresso_erro</div>
        }

    }

</div>

@code {
    [Parameter]
    public Evento evento { get; set; }

    public bool botao_ingresso_disponivel;
    public string? text_ingresso_erro;

    public async Task IngressarEvento()
    {
        string? token = TokenSystem.GetToken().nome;

        if (token == null || evento == null)
        {
            return;
        }

        // Se não
        var resultado = await http.PostAsync($"https://localhost:7094/chamaovar-api/ingresso?" +
            $"tokenTorcedor={token}&" +
            $"eventoId={evento.id}", null);


        // Pegar o status code do get
        int statusCode = (int)resultado.StatusCode;

        // Se o Resultado deu 200, ou seja, deu certo
        if (statusCode == 200)
        {
            // Pegar o torcedor no json indicado
            try
            {
                await JsRuntime.InvokeVoidAsync("alert", "Agora você está participando do evento!");
            }
            catch
            {

            }


            // Recarregar página
            nav.NavigateTo(nav.Uri, true);

            return;
        }

        // Se não
        await JsRuntime.InvokeVoidAsync("alert", await resultado.Content.ReadAsStringAsync());
    }

    protected override async Task OnParametersSetAsync()
    {
        // Verificar se existe ingresso com esse usuário
        var resultado = await http.GetAsync("https://localhost:7094/chamaovar-api/ingresso/byallIDs?" +
            $"idEvento={evento.id}" +
            $"&tokenUsuario={TokenSystem.GetToken().nome}");

        // Verificar status code
        int statusCode = (int)resultado.StatusCode;

        // Verificar o que fazer de acordo com cada status code apresentado
        if (statusCode == 200)
        {
            botao_ingresso_disponivel = false;
            text_ingresso_erro = "Você já está participando!";
        }
        else if (statusCode == 400)
        {
            Torcedor? tcdr = await TokenSystem.GetTorcedorByToken();

            if (tcdr == null) return;

            if (tcdr.score < evento.minimo_pontuacao)
            {
                botao_ingresso_disponivel = false;
                text_ingresso_erro = "Pontos insuficientes!";
            }
            else
            {
                botao_ingresso_disponivel = true;
            }

        }
        else
        {
            botao_ingresso_disponivel = false;
            text_ingresso_erro = await resultado.Content.ReadAsStringAsync();
        }

        //return base.OnParametersSetAsync();
    }
}

