@page "/login/criar-conta"
@rendermode InteractiveServer
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject HttpClient http
@using chamaovar.Components.Code

<PageTitle>Chama o VAR -  Criar conta</PageTitle>

<div class="pagina_criar_conta">
    <h3>Criar Conta</h3>
   
    <form method="post" class="form-criar-conta">
        <input type="text" name="name" placeholder="Digite seu nome completo" required @bind="name"/>
        <input type="email" name="" placeholder="Digite seu e-mail" required @bind="email" />
        <input type="text" name="" placeholder="Digite seu CPF" required @bind="cpf" />
        <input type="text" name="" placeholder="Digite seu telefone" required @bind="telefone"/>
        <input type="password" name="" placeholder="Digite sua senha" required @bind="password" />
        <input type="password" name="" placeholder="Digite novamente sua senha" required @bind="confirmPassword" />
        <input type="date" name="" placeholder="Digite sua data de nascimento" required @bind="date" />
        <div class="cheque-tudo">
            <input class="cheque-box" type="checkbox" name="" value="" required @bind="aceitouTermos"/> <span class="texto-cheque-box">Li e Concordo com os Termos de Serviço da plataforma</span>
        </div> 
    </form>

    <button type="button" class="botao_largo" name="" value="" @onclick="ContaCriada">Criar conta</button>

    <a href="login">
        <span class="nav_links">Já possui conta? Login</span>
    </a>
</div>

@code {
    private string? name, email, cpf, password, confirmPassword, telefone;
    private DateTime date;

    private bool aceitouTermos;

    private async void ContaCriada()
    {
        // Retirar valores nulos
        this.AntiNull();

        // Verificar no front se tudo deu certo
        ValidationResult front = InputValidation.ValidarCriarConta(cpf, email, telefone, date, name, password, confirmPassword, aceitouTermos);

        if (!front.success)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"{front.textResult}");
            return;
        }

        // Verificar se os dados ja existem no Sistema
        var isUnico = await http.GetAsync($"/chamaovar-api/torcedor/verificar-unico?cpf={cpf}&email={email}&telefone={telefone}");

        // Realizar um post caso os dados sejam unicos
        if ((int)isUnico.StatusCode == 200)
        {
            try
            {
                // Realizar o post
                await http.PostAsync($"/chamaovar-api/torcedor?nome_completo={name}&" +
                    $"cpf={cpf}&email={email}&telefone={telefone}&nascimento={date}&" +
                    $"senha={password}&tecnico={true}", null);

                // Indicar que a conta foi criada
                await JsRuntime.InvokeVoidAsync("alert", "Conta criada com sucesso!!");
                NavigationManager.NavigateTo("login");
            }
            catch
            {
                // Caso dê errado
                await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro");
            }
        }
        else
        {
            // Alertar o erro
            await JsRuntime.InvokeVoidAsync("alert", $"{await isUnico.Content.ReadAsStringAsync()}");
        }

    }

    private void AntiNull()
    {
        if (name == null) name = "";
        if (cpf == null) cpf = "";
        if (email == null) email = "";
        if (password == null) password = "";
        if (confirmPassword == null) confirmPassword = "";
        if (telefone == null) telefone = "";
    }
}
